/**
 * @file    motor_bldc.c
 * @brief   Implementacja obsługi ESC (PWM 50 Hz) – neutral + API
 */

#include "motor_bldc.h"

static TIM_HandleTypeDef *s_htim = NULL;

/* Uwaga konfiguracyjna:
 * Rekomendujemy TIM1 tak ustawiony w MX_TIM1_Init():
 *  - PSC = 79, ARR = 20000-1  -> licznik 1 MHz (1 tick = 1 µs), okres 20 ms (50 Hz)
 *  - CH1 = PWM1, CH4 = PWM1, start PWM w MX_TIM1_Init()
 */

void ESC_Init(TIM_HandleTypeDef *htim)
{
    s_htim = htim;

    /* Jeśli PWM nie został wystartowany w MX_TIM1_Init(), to odkomentuj: */
    /*
    HAL_TIM_PWM_Start(s_htim, ESC_CH1);
    HAL_TIM_PWM_Start(s_htim, ESC_CH4);
    */

    /* Na starcie ustaw neutral na oba kanały */
    ESC_SetNeutralAll();
}

void ESC_SetNeutralAll(void)
{
    if (!s_htim) return;
    __HAL_TIM_SET_COMPARE(s_htim, ESC_CH1, 1500);  // 1.5 ms
    __HAL_TIM_SET_COMPARE(s_htim, ESC_CH4, 1500);  // 1.5 ms
}

void ESC_WriteUs(uint32_t ch, uint16_t pulse_us)
{
    if (!s_htim) return;
    /* Ogranicz dla bezpieczeństwa: typowy zakres ESC 1000..2000 µs */
    if (pulse_us < 1000) pulse_us = 1000;
    if (pulse_us > 2000) pulse_us = 2000;
    __HAL_TIM_SET_COMPARE(s_htim, ch, pulse_us);
}

uint16_t ESC_MapSpeedToUs(int8_t speed)
{
    /* speed: -100..100  ->  1000..2000 µs,  0 -> 1500 µs */
    if (speed < -100) speed = -100;
    if (speed >  100) speed =  100;
    /* mapowanie liniowe:  speed=-100 => 1000,  0 => 1500,  100 => 2000 */
    return (uint16_t)(1500 + ((int32_t)speed * 5));  // 100 * 5 = 500 -> 1500±500
}
