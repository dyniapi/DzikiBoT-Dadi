#include "tcs3472.h"

/* Adres: 7-bit=0x29 → HAL: (0x29<<1) */
#define TCS3472_ADDR     (0x29U << 1)
#define CMD(x)           (0x80U | (x))

/* Rejestry */
#define REG_ENABLE       0x00U
#define REG_ATIME        0x01U
#define REG_CONTROL      0x0FU
#define REG_CDATAL       0x14U  // Clear low, potem 8 bajtów: C,R,G,B (LSB,MSB,...)

/* Konfiguracja zalecana:
   - ENABLE = 0x03 (PON + AEN)
   - ATIME  = 0xEB (~50 ms)
   - CONTROL(GAIN) = 0x01 (x4) – możesz później dostroić (0x00=1x,0x01=4x,0x02=16x,0x03=60x) */

static I2C_HandleTypeDef *tcs_right = NULL; // I2C1
static I2C_HandleTypeDef *tcs_left  = NULL; // I2C3

static void TCS3472_Config(I2C_HandleTypeDef *hi2c)
{
    if (!hi2c) return;
    uint8_t cmd[2];

    cmd[0] = CMD(REG_ENABLE);  cmd[1] = 0x03;  HAL_I2C_Master_Transmit(hi2c, TCS3472_ADDR, cmd, 2, 20);
    cmd[0] = CMD(REG_ATIME);   cmd[1] = 0xEB;  HAL_I2C_Master_Transmit(hi2c, TCS3472_ADDR, cmd, 2, 20);
    cmd[0] = CMD(REG_CONTROL); cmd[1] = 0x01;  HAL_I2C_Master_Transmit(hi2c, TCS3472_ADDR, cmd, 2, 20);
}

void TCS3472_Right_Init(I2C_HandleTypeDef *hi2c1) { tcs_right = hi2c1; TCS3472_Config(tcs_right); }
void TCS3472_Left_Init (I2C_HandleTypeDef *hi2c3) { tcs_left  = hi2c3; TCS3472_Config(tcs_left ); }

static TCS3472_Data_t TCS3472_ReadGeneric(I2C_HandleTypeDef *hi2c)
{
    TCS3472_Data_t d = {0};
    if (!hi2c) return d;

    uint8_t reg = CMD(REG_CDATAL);
    uint8_t buf[8] = {0};

    HAL_I2C_Master_Transmit(hi2c, TCS3472_ADDR, &reg, 1, 20);
    if (HAL_I2C_Master_Receive(hi2c, TCS3472_ADDR, buf, sizeof(buf), 20) == HAL_OK)
    {
        d.clear = (uint16_t)(buf[0] | (buf[1]<<8));
        d.red   = (uint16_t)(buf[2] | (buf[3]<<8));
        d.green = (uint16_t)(buf[4] | (buf[5]<<8));
        d.blue  = (uint16_t)(buf[6] | (buf[7]<<8));
    }
    return d;
}

TCS3472_Data_t TCS3472_Right_Read(void) { return TCS3472_ReadGeneric(tcs_right); }
TCS3472_Data_t TCS3472_Left_Read (void) { return TCS3472_ReadGeneric(tcs_left ); }
